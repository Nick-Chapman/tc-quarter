25 tests ran; all pass.
*tc-quarter*
quarter.q
?' :: (s -- s.&(s1 -- s2))
?~ :: (s -- s)
?# :: (s.x1 -- s)
?i :: (s -- s.&c1)
?t :: (s.&Num -- s)
( :: (s -- s)
?( :: (s -- s)
?h :: (s -- s.&c1)
?j :: (s -- s)
?q :: (s.&Char.&Char -- s.Num)
?p :: (s.&Char -- s)
?n :: (s.Num -- s.Num)
?k :: (s -- s)
?c :: (s -- s)
?v :: (s -- s.&c1)
?w :: (s -- s.&c1)
?g :: (s.&Char.&(s1 -- s2) -- s.&(s1 -- s2))
?u :: (s.&Char -- s.&(s1 -- s2))
?f :: (s.&Char -- s.&(s1 -- s2))
[ :: (s -- s)
?[ :: (s -- s)
?] :: (s -- s)
: :: (s -- s1)
' :: (s -- s.&(s1 -- s2))
immediate :: (s -- s)
here :: (s -- s.&c1)
literal :: (s.x1 -- s)
[compile] :: (s -- s)
['] :: (s -- s)
compile :: (s -- s)
tail :: (s -- s)
recurse :: (s -- s)
ahead> :: (s -- s.&c1)
<patch :: (s.&Num -- s)
if :: (s -- s.&c1)
then :: (s.&Num -- s)
else :: (s.&Num -- s.&c1)
begin :: (s -- s.&c1)
again :: (s.&c1 -- s)
bl :: (s -- s.Num)
is-white :: (s.Num -- s.Num)
skip-leading-whitespace :: (s -- s)
collect-while-not-whitespace :: (s -- s)
word, :: (s -- s.&c1)
word :: (s -- s.&c1)
char :: (s -- s.Num)
[char] :: (s -- s)
skip-to-close :: (s.Num -- s)
( :: (s -- s)
2 :: (s -- s.Num)
3 :: (s -- s.Num)
constant :: (s.x1 -- s)
variable :: (s -- s)
type :: (s.&Char -- s)
collect-string :: (s -- s.Num)
s" :: (s -- s)
." :: (s -- s1)
abort" :: (s -- s1)
.." :: (s -- s1)
forth.f
space :: (s -- s)
rot :: (s.x1.x2.x3 -- s.x2.x4.x1)
-rot :: (s.x1.x2.x3 -- s.x3.x1.x4)
show-if-not-hidden :: (s.&(s1 -- s2) -- s)
words-continue :: (s.&(s1 -- s2).&(s1 -- s2) -- s.&(s1 -- s2).&(s1 -- s2))
words-since :: (s.&(s1 -- s2) -- s)
words :: (s -- s)
x-hide :: (s.&(s1 -- s2) -- s)
hide :: (s -- s)
allot :: (s.Num -- s)
cell :: (s -- s.Num)
cells :: (s.Num -- s.Num)
cell+ :: (s.x1 -- s.x1)
char+ :: (s.x1 -- s.x1)
chars :: (s -- s)
space :: (s -- s)
spaces :: (s.Num -- s)
false :: (s -- s.x1)
true :: (s -- s.Num)
or :: (s.Num.x1 -- s.Num)
and :: (s.x1.x2 -- s.x1)
invert :: (s.Num -- s.Num)
nip :: (s.x1.x2 -- s.x2)
2dup :: (s.x1.x2 -- s.x1.x2.x1.x2)
2drop :: (s.x1.x2 -- s)
> :: (s.x1.x1 -- s.Num)
<= :: (s.x1.x1 -- s.Num)
>= :: (s.x1.x1 -- s.Num)
0< :: (s.x1 -- s.Num)
0= :: (s.x1 -- s.Num)
1+ :: (s.x1 -- s.x1)
1- :: (s.Num -- s.Num)
negate :: (s.x1 -- s.Num)
abs :: (s.Num -- s.Num)
min :: (s.x1.x1 -- s.x1)
max :: (s.x1.x1 -- s.x1)
mod :: (s.Num.Num -- s.Num)
/ :: (s.Num.Num -- s.Num)
+! :: (s.Num.&Num -- s)
256 :: (s -- s.Num)
akey? :: (s -- s.Num)
ekey? :: (s -- s.Num)
do :: (s -- s.&c1)
i :: (s -- s)
loop :: (s.&c1 -- s)
erase :: (s.&Char.Num -- s)
2 :: (s -- s.Num)
10 :: (s -- s.Num)
16 :: (s -- s.Num)
256 :: (s -- s.Num)
hex-mode :: (s -- s.&c1)
hex :: (s -- s)
decimal :: (s -- s)
decimal-digit? :: (s.Num -- s.Num)
extended-digit? :: (s.Num -- s.Num)
hex-digit? :: (s.Num -- s.Num)
digit? :: (s.Num -- s.Num)
convert-digit :: (s.Num -- s.Num)
base :: (s -- s.Num)
** TypeError: ../quarter-forth/f/forth.f:362.3 : stack cyclic: s2098.Num ~ s2098
number-loop :: (s.Num.&Char -- s.Num.Num)
** TypeError: ../quarter-forth/f/forth.f:370.3 : stack cyclic: s2130.x2137 ~ s2130
number? :: (s.&Char -- s.Num.Num)
print-digit :: (s.Num -- s)
** TypeError: ../quarter-forth/f/forth.f:384.3 : stack cyclic: s2164 ~ s2164.Num
dot-loop :: (s.Num -- s)
.decimal :: (s.Num -- s)
.hex1 :: (s.Num -- s)
.hex2 :: (s.Num -- s)
.hex4 :: (s.Num -- s)
.hex :: (s.Num -- s)
. :: (s.Num -- s)
? :: (s.&Num -- s)
s= :: (s.&Char.&Char -- s.Num)
find-loop :: (s.&Char.&(s1 -- s2) -- s.&(s1 -- s2))
find :: (s.&Char -- s.&(s1 -- s2))
** TypeError: ../quarter-forth/f/forth.f:430.3 : stack cyclic: s2455.x2444 ~ s2455
find! :: (s.&Char -- s.&(s1 -- s2))
' :: (s -- s.&(s1 -- s2))
** TypeError: ../quarter-forth/f/forth.f:441.3 : elem: Num ~ &Char
compiling :: (s -- s)
: :: (s -- s)
** TypeError: ../quarter-forth/f/forth.f:453.3 : elem: Num ~ &Char
[ :: (s -- s)
Loading tools
x :: (s.Num.Num -- s)
mem :: (s -- s)
** TypeError: ../quarter-forth/f/tools.f:18.3 : elem: &Num ~ Num
** TypeError: ../quarter-forth/f/tools.f:18.3 : elem: &Num ~ Num
** TypeError: ../quarter-forth/f/tools.f:18.3 : elem: &c2751 ~ Num
memv :: (s -- s)
e8 :: (s -- s.Num)
c3 :: (s -- s.Num)
is-call :: (s.Num -- s.Num)
is-ret :: (s.Num -- s.Num)
@rel->abs :: (s.&Num -- s.&Num)
** TypeError: ../quarter-forth/f/tools.f:39.3 : contents: Num ~ (s2882 -- s2883)
** TypeError: ../quarter-forth/f/tools.f:39.3 : contents: Num ~ Char
** TypeError: ../quarter-forth/f/tools.f:39.3 : contents: Num ~ Char
disassemble :: (s.&Num -- s)
** TypeError: ../quarter-forth/f/tools.f:56.3 : contents: (s2970 -- s2971) ~ Num
x-see :: (s.&(s1 -- s2) -- s)
** TypeError: ../quarter-forth/f/tools.f:63.3 : stack cyclic: s3002.&(s3000 -- s3001) ~ s3002
see :: (s -- s)
** TypeError: ../quarter-forth/f/tools.f:68.3 : elem: Num ~ &Num
** TypeError: ../quarter-forth/f/tools.f:68.3 : elem: &Num ~ Num
** TypeError: ../quarter-forth/f/tools.f:68.3 : elem: Num ~ &Num
.s-continue :: (s.Num -- s)
** TypeError: ../quarter-forth/f/tools.f:77.3 : elem: &Num ~ Num
.s :: (s -- s)
depth :: (s -- s.Num)
rdepth :: (s -- s.Num)
.?stack :: (s -- s)
times :: (s.&(s -- s1).x2 -- s)
old-key :: (s -- s.&(s1 -- s1.Num))
raw-key :: (s -- s.Num)
is-escape :: (s.Num -- s.Num)
** TypeError: ../quarter-forth/f/tools.f:113.3 : elem cyclic: x3159 ~ &(s3158.x3159.x3160 -- s3197.x3187.x3184)
pag-continue :: (s.x2.x3 -- s1)
pag :: (s.x2.x3 -- s1)
is-printable? :: (s.Num -- s.Num)
emit-printable-or-dot :: (s.Num -- s)
** TypeError: ../quarter-forth/f/tools.f:130.3 : stack cyclic: s3260.x3259 ~ s3260
drop-if-not-zero :: (s.x1 -- s)
default-0 :: (s -- s)
dc :: (s.&Char -- s.&Char)
dc64 :: (s.Num -- s.Num)
dc-oneK :: (s -- s)
dump :: (s.x2 -- s1)
emit-byte :: (s.Num -- s)
db :: (s.&Char -- s.&Char)
xxd-line :: (s.Num -- s.Num)
xxd-page :: (s -- s)
xxd :: (s.x2 -- s1)
see1 :: (s.&(s1 -- s2) -- s.&(s1 -- s2))
see10 :: (s -- s)
see-all :: (s -- s1)
Loading regression
inc :: (s.x1 -- s.x1)
hi :: (s -- s.Num.Num)
-1 :: (s -- s.Num)
eggs :: (s -- s.&c1)
e :: (s -- s)
sq :: (s -- s1)
a :: (s -- s.&c1)
b :: (s -- s.&c1)
one :: (s -- s.Num)
two :: (s -- s.Num)
life :: (s -- s.Num)
Loading examples ( star :: (s -- s)
stars :: (s.x1 -- s)
margin :: (s -- s)
blip :: (s -- s)
bar :: (s -- s)
F :: (s -- s)
square :: (s.Num -- s.Num)
fact :: (s.Num -- s.Num)
fib :: (s.Num -- s.Num)
fact-iterative :: (s.x1 -- s.Num)
even? :: (s.Num -- s.Num)
collatz :: (s.Num -- s)
z :: (s -- s)
twice :: (s.&(s -- s1) -- s2)
F fact fib fact-iterative collatz z )
Loading primes
divisible-by :: (s.Num.Num -- s.Num)
any-divide :: (s.x1.&Char -- s.Num)
primes-below-16 :: (s -- s.&c1)
is-small-prime :: (s.x1 -- s.Num)
small-loop :: (s.Num -- s)
primes-below-256 :: (s -- s.&c1)
is-big-prime :: (s.x1 -- s.Num)
big-loop :: (s.Num -- s)
emit-list :: (s.&Char -- s)
primes :: (s -- s)
Loading snake
set-block-cursor :: (s -- s)
set-underline-cursor :: (s -- s)
hide-cursor :: (s -- s)
at-xy :: (s.Num.Num -- s)
xy-read-char-col :: (s.Num.Num -- s.Num.Num)
xy-read-char :: (s.Num.Num -- s.Num)
xy-read-col :: (s.Num.Num -- s.Num)
fg :: (s -- s.&c1)
bg :: (s -- s.&c1)
colour :: (s -- s.Num)
xy-emit :: (s.Num.x1.Num -- s)
black :: (s -- s.Num)
blue :: (s -- s.Num)
green :: (s -- s.Num)
cyan :: (s -- s.Num)
red :: (s -- s.Num)
magenta :: (s -- s.Num)
brown :: (s -- s.Num)
light-grey :: (s -- s.Num)
dark-grey :: (s -- s.Num)
light-blue :: (s -- s.Num)
light-green :: (s -- s.Num)
light-cyan :: (s -- s.Num)
light-red :: (s -- s.Num)
light-magenta :: (s -- s.Num)
yellow :: (s -- s.Num)
white :: (s -- s.Num)
block :: (s.Num.x1 -- s)
block-right :: (s.Num.x1 -- s.Num.x1)
block-down :: (s.Num.x1 -- s.Num.x1)
border :: (s -- s)
max-len :: (s -- s.Num)
xta :: (s -- s.&c1)
yta :: (s -- s.&c1)
** TypeError: ../quarter-forth/f/snake.f:74.3 : elem: &c4381 ~ Num
xpos :: (s.Num -- s.Num)
** TypeError: ../quarter-forth/f/snake.f:75.3 : elem: &c4390 ~ Num
ypos :: (s.Num -- s.Num)
direction :: (s -- s.&c1)
going-vertical :: (s -- s.&c1)
escaped :: (s -- s.&c1)
slowness :: (s -- s.&c1)
len :: (s -- s.&c1)
-1 :: (s -- s.Num)
** TypeError: ../quarter-forth/f/snake.f:88.3 : elem: Num ~ &x4444
** TypeError: ../quarter-forth/f/snake.f:88.3 : elem: Num ~ &x4444
left :: (s -- s)
** TypeError: ../quarter-forth/f/snake.f:89.3 : elem: Num ~ &x4466
** TypeError: ../quarter-forth/f/snake.f:89.3 : elem: Num ~ &x4466
right :: (s -- s)
** TypeError: ../quarter-forth/f/snake.f:90.3 : elem: Num ~ &x4488
** TypeError: ../quarter-forth/f/snake.f:90.3 : elem: Num ~ &x4488
up :: (s -- s)
** TypeError: ../quarter-forth/f/snake.f:91.3 : elem: Num ~ &x4510
** TypeError: ../quarter-forth/f/snake.f:91.3 : elem: Num ~ &x4510
down :: (s -- s)
nop :: (s -- s)
** TypeError: ../quarter-forth/f/snake.f:94.3 : elem: Num ~ &x4532
** TypeError: ../quarter-forth/f/snake.f:94.3 : elem: Num ~ &x4522
set-start-state :: (s -- s)
move-head :: (s -- s1)
set-dir :: (s.x1 -- s)
isH :: (s -- s.Num)
isV :: (s -- s.x1)
setH :: (s -- s)
setV :: (s -- s)
** TypeError: ../quarter-forth/f/snake.f:112.3 : elem: Num ~ &x4652
** TypeError: ../quarter-forth/f/snake.f:112.3 : elem: Num ~ &x4652
shift-x :: (s.Num -- s)
** TypeError: ../quarter-forth/f/snake.f:113.3 : elem: Num ~ &x4675
** TypeError: ../quarter-forth/f/snake.f:113.3 : elem: Num ~ &x4675
shift-y :: (s.Num -- s)
shift-xy :: (s.Num -- s)
head-to-tail-loop :: (s.Num -- s.Num)
head-to-tail :: (s -- s.Num)
** TypeError: ../quarter-forth/f/snake.f:122.3 : elem: Num ~ &Num
** TypeError: ../quarter-forth/f/snake.f:122.3 : elem: Num ~ &Num
clear-tail :: (s -- s)
maybe-grow :: (s.Num -- s)
tick :: (s -- s)
tick2 :: (s -- s)
pause1 :: (s -- s)
do-pause :: (s -- s)
** TypeError: ../quarter-forth/f/snake.f:138.3 : stack cyclic: s4869.x4868 ~ s4869
speed-up :: (s -- s)
is-escape :: (s.Num -- s.Num)
is-return :: (s.Num -- s.Num)
control :: (s.Num.Num -- s)
snake-char :: (s -- s.Num)
** TypeError: ../quarter-forth/f/snake.f:155.3 : elem: Num ~ &x5044
** TypeError: ../quarter-forth/f/snake.f:155.3 : elem: Num ~ &Num
draw-head :: (s -- s)
** TypeError: ../quarter-forth/f/snake.f:157.3 : elem: Num ~ &Num
** TypeError: ../quarter-forth/f/snake.f:157.3 : elem: Num ~ &Num
collide? :: (s -- s.Num)
** TypeError: ../quarter-forth/f/snake.f:164.3 : stack cyclic: s5204 ~ s5204.Num.Num
app-loop :: (s -- s.Num)
** TypeError: ../quarter-forth/f/snake.f:179.3 : stack cyclic: s5250 ~ s5250.Num
snake :: (s -- s.Num)
Loading buffer
old-key :: (s -- s.&(s1 -- s1.Num))
raw-key :: (s -- s.Num)
key-buffer-size :: (s -- s.Num)
key-buffer :: (s -- s.&c1)
at-start-of-buffer :: (s.&c1 -- s.Num)
is-space-left-in-buffer :: (s.&c1 -- s.Num)
is-newline :: (s.Num -- s.Num)
is-backspace :: (s.Num -- s.Num)
is-printable :: (s.Num -- s.Num)
**{EchoEnabled}
echo-enabled :: (s -- s.&c1)
**{EchoOff}
echo-on :: (s -- s)
echo-off :: (s -- s)
echo :: (s.Num -- s)
ok :: (s -- s)
** TypeError: ../quarter-forth/f/buffer.f:30.3 : elem: Num ~ &c5456
** TypeError: ../quarter-forth/f/buffer.f:30.3 : elem: Num ~ &c5515
** TypeError: ../quarter-forth/f/buffer.f:30.3 : elem: Num ~ &Char
fill-loop :: (s.Num -- s.Num)
** TypeError: ../quarter-forth/f/buffer.f:54.3 : elem: Num ~ &Char
** TypeError: ../quarter-forth/f/buffer.f:54.3 : elem: &c5549 ~ Num
fill :: (s -- s)
kb-pointer :: (s -- s.&c1)
reset-kb-pointer :: (s -- s)
** TypeError: ../quarter-forth/f/buffer.f:65.3 : stack cyclic: s5608.x5601 ~ s5608
buffered-key :: (s -- s.Num)
**{SetKey}

Welcome to Quarter Forth. A 16-bit Forth system running on x86.

Bytes available: 55224 

** TypeError: ../quarter-forth/f/start.f:9.3 : contents: Num ~ Char
wipe :: (s.&Char -- s)
**{StartupIsComplete}
#machine-ticks=8796067
#errors=52
